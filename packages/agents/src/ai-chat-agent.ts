import type {
  UIMessage as ChatMessage,
  StreamTextOnFinishCallback,
  ToolSet
} from "ai";
import { Agent, type AgentContext, type Connection, type WSMessage } from "./";
import {
  MessageType,
  type IncomingMessage,
  type OutgoingMessage
} from "./ai-types";
import { autoTransformMessages } from "./ai-chat-v5-migration";

const decoder = new TextDecoder();

/**
 * Extension of Agent with built-in chat capabilities
 * @template Env Environment type containing bindings
 */
export class AIChatAgent<Env = unknown, State = unknown> extends Agent<
  Env,
  State
> {
  /**
   * Map of message `id`s to `AbortController`s
   * useful to propagate request cancellation signals for any external calls made by the agent
   */
  private _chatMessageAbortControllers: Map<string, AbortController>;
  /** Array of chat messages for the current conversation */
  messages: ChatMessage[];
  constructor(ctx: AgentContext, env: Env) {
    super(ctx, env);
    this.sql`create table if not exists cf_ai_chat_agent_messages (
      id text primary key,
      message text not null,
      created_at datetime default current_timestamp
    )`;

    // Load messages and automatically transform them to v5 format
    const rawMessages = (
      this.sql`select * from cf_ai_chat_agent_messages` || []
    ).map((row) => {
      return JSON.parse(row.message as string);
    });

    // Automatic migration following https://jhak.im/blog/ai-sdk-migration-handling-previously-saved-messages
    this.messages = autoTransformMessages(rawMessages);

    this._chatMessageAbortControllers = new Map();
  }

  private _broadcastChatMessage(message: OutgoingMessage, exclude?: string[]) {
    this.broadcast(JSON.stringify(message), exclude);
  }

  override async onMessage(connection: Connection, message: WSMessage) {
    if (typeof message === "string") {
      let data: IncomingMessage;
      try {
        data = JSON.parse(message) as IncomingMessage;
      } catch (_error) {
        // silently ignore invalid messages for now
        // TODO: log errors with log levels
        return;
      }
      if (
        data.type === MessageType.CF_AGENT_USE_CHAT_REQUEST &&
        data.init.method === "POST"
      ) {
        const {
          // method,
          // keepalive,
          // headers,
          body // we're reading this
          //
          // // these might not exist?
          // dispatcher,
          // duplex
        } = data.init;
        const { messages } = JSON.parse(body as string);

        // Automatically transform any incoming messages
        const transformedMessages = autoTransformMessages(messages);

        this._broadcastChatMessage(
          {
            messages: transformedMessages,
            type: MessageType.CF_AGENT_CHAT_MESSAGES
          },
          [connection.id]
        );

        await this.persistMessages(transformedMessages, [connection.id]);

        this.observability?.emit(
          {
            displayMessage: "Chat message request",
            id: data.id,
            payload: {},
            timestamp: Date.now(),
            type: "message:request"
          },
          this.ctx
        );

        const chatMessageId = data.id;
        const abortSignal = this._getAbortSignal(chatMessageId);

        return this._tryCatchChat(async () => {
          const response = await this.onChatMessage(
            async (_finishResult) => {
              this._removeAbortController(chatMessageId);

              this.observability?.emit(
                {
                  displayMessage: "Chat message response",
                  id: data.id,
                  payload: {},
                  timestamp: Date.now(),
                  type: "message:response"
                },
                this.ctx
              );

              // Note: Message persistence now happens in the _reply method
              // after the complete response text has been accumulated
            },
            abortSignal ? { abortSignal } : undefined
          );

          if (response) {
            await this._reply(data.id, response);
          } else {
            // Log a warning for observability
            console.warn(
              `[AIChatAgent] onChatMessage returned no response for chatMessageId: ${chatMessageId}`
            );
            // Send a fallback message to the client
            this._broadcastChatMessage(
              {
                body: "No response was generated by the agent.",
                done: true,
                id: data.id,
                type: MessageType.CF_AGENT_USE_CHAT_RESPONSE
              },
              [connection.id]
            );
          }
        });
      }
      if (data.type === MessageType.CF_AGENT_CHAT_CLEAR) {
        this._destroyAbortControllers();
        this.sql`delete from cf_ai_chat_agent_messages`;
        this.messages = [];
        this._broadcastChatMessage(
          {
            type: MessageType.CF_AGENT_CHAT_CLEAR
          },
          [connection.id]
        );
      } else if (data.type === MessageType.CF_AGENT_CHAT_MESSAGES) {
        // replace the messages with the new ones, automatically transformed
        const transformedMessages = autoTransformMessages(data.messages);
        await this.persistMessages(transformedMessages, [connection.id]);
      } else if (data.type === MessageType.CF_AGENT_CHAT_REQUEST_CANCEL) {
        // propagate an abort signal for the associated request
        this._cancelChatRequest(data.id);
      }
    }
  }

  override async onRequest(request: Request): Promise<Response> {
    return this._tryCatchChat(() => {
      const url = new URL(request.url);
      if (url.pathname.endsWith("/get-messages")) {
        const messages = (
          this.sql`select * from cf_ai_chat_agent_messages` || []
        ).map((row) => {
          return JSON.parse(row.message as string);
        });
        return Response.json(messages);
      }
      return super.onRequest(request);
    });
  }

  private async _tryCatchChat<T>(fn: () => T | Promise<T>) {
    try {
      return await fn();
    } catch (e) {
      throw this.onError(e);
    }
  }

  /**
   * Handle incoming chat messages and generate a response
   * @param onFinish Callback to be called when the response is finished
   * @param options.signal A signal to pass to any child requests which can be used to cancel them
   * @returns Response to send to the client or undefined
   */
  async onChatMessage(
    // biome-ignore lint/correctness/noUnusedFunctionParameters: overridden later
    onFinish: StreamTextOnFinishCallback<ToolSet>,
    // biome-ignore lint/correctness/noUnusedFunctionParameters: overridden later
    options?: { abortSignal: AbortSignal | undefined }
  ): Promise<Response | undefined> {
    throw new Error(
      "recieved a chat message, override onChatMessage and return a Response to send to the client"
    );
  }

  /**
   * Save messages on the server side
   * @param messages Chat messages to save
   */
  async saveMessages(messages: ChatMessage[]) {
    await this.persistMessages(messages);
  }

  async persistMessages(
    messages: ChatMessage[],
    excludeBroadcastIds: string[] = []
  ) {
    this.sql`delete from cf_ai_chat_agent_messages`;
    for (const message of messages) {
      this.sql`insert into cf_ai_chat_agent_messages (id, message) values (${
        message.id
      },${JSON.stringify(message)})`;
    }
    this.messages = messages;
    this._broadcastChatMessage(
      {
        messages: messages,
        type: MessageType.CF_AGENT_CHAT_MESSAGES
      },
      excludeBroadcastIds
    );
  }

  private async _reply(id: string, response: Response) {
    return this._tryCatchChat(async () => {
      if (!response.body) {
        // Send empty response if no body
        this._broadcastChatMessage({
          body: "",
          done: true,
          id,
          type: MessageType.CF_AGENT_USE_CHAT_RESPONSE
        });
        return;
      }

      const reader = response.body.getReader();
      let fullResponseText = ""; // Accumulate the assistant's response text
      // Track tool calls by toolCallid, so we can persist them as parts later
      const toolCalls = new Map<
        string,
        {
          type: string;
          state: string;
          toolCallId: string;
          toolName: string;
          input?: unknown;
          output?: unknown;
          isError?: boolean;
          errorText?: string;
        }
      >();
      try {
        while (true) {
          const { done, value } = await reader.read();
          if (done) {
            // Send final completion signal
            this._broadcastChatMessage({
              body: "",
              done: true,
              id,
              type: MessageType.CF_AGENT_USE_CHAT_RESPONSE
            });
            break;
          }

          const chunk = decoder.decode(value);

          // Parse AI SDK v5 SSE format and extract text deltas
          const lines = chunk.split("\n");
          for (const line of lines) {
            if (line.startsWith("data: ") && line !== "data: [DONE]") {
              try {
                const data = JSON.parse(line.slice(6)); // Remove 'data: ' prefix

                switch (data.type) {
                  // SSE event signaling the tool input is ready. We track by
                  // `toolCallId` so we can persist it as a tool part in the message.
                  case "tool-input-available": {
                    const { toolCallId, toolName, input } = data;
                    toolCalls.set(toolCallId, {
                      toolCallId,
                      toolName,
                      input,
                      type: toolName ? `tool-${toolName}` : "dynamic-tool",
                      state: "input-available"
                    });
                    break;
                  }

                  // SSE event signaling the tool output is ready. We should've
                  // already received the input in a previous event so an entry
                  // with `toolCallId` should already be present
                  case "tool-output-available": {
                    const { toolCallId, output, isError, errorText } = data;
                    const toolPart = toolCalls.get(toolCallId);
                    if (toolPart)
                      toolCalls.set(toolCallId, {
                        ...toolPart,
                        output,
                        isError,
                        errorText,
                        state: "output-available"
                      });
                    break;
                  }

                  case "error": {
                    // Non-tool errors, we set `error: true` and terminate early
                    this._broadcastChatMessage({
                      error: true,
                      body: data.errorText ?? JSON.stringify(data),
                      done: false,
                      id,
                      type: MessageType.CF_AGENT_USE_CHAT_RESPONSE
                    });
                    return;
                  }

                  case "text-delta": {
                    if (data.delta) fullResponseText += data.delta;
                    break;
                  }
                }

                // Always forward the raw part to the client
                this._broadcastChatMessage({
                  body: JSON.stringify(data),
                  done: false,
                  id,
                  type: MessageType.CF_AGENT_USE_CHAT_RESPONSE
                });
              } catch (_e) {
                // Skip malformed JSON lines silently
              }
            }
          }
        }
      } finally {
        reader.releaseLock();
      }

      // After streaming is complete, persist the complete assistant's response
      const messageParts: ChatMessage["parts"] = [];

      Array.from(toolCalls.values()).forEach((t) => {
        messageParts.push(t as ChatMessage["parts"][number]);
      });

      if (fullResponseText.trim()) {
        messageParts.push({ type: "text", text: fullResponseText });
      }

      if (messageParts.length > 0) {
        await this.persistMessages([
          ...this.messages,
          {
            id: `assistant_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`,
            role: "assistant",
            parts: messageParts
          }
        ]);
      }
    });
  }

  /**
   * For the given message id, look up its associated AbortController
   * If the AbortController does not exist, create and store one in memory
   *
   * returns the AbortSignal associated with the AbortController
   */
  private _getAbortSignal(id: string): AbortSignal | undefined {
    // Defensive check, since we're coercing message types at the moment
    if (typeof id !== "string") {
      return undefined;
    }

    if (!this._chatMessageAbortControllers.has(id)) {
      this._chatMessageAbortControllers.set(id, new AbortController());
    }

    return this._chatMessageAbortControllers.get(id)?.signal;
  }

  /**
   * Remove an abort controller from the cache of pending message responses
   */
  private _removeAbortController(id: string) {
    this._chatMessageAbortControllers.delete(id);
  }

  /**
   * Propagate an abort signal for any requests associated with the given message id
   */
  private _cancelChatRequest(id: string) {
    if (this._chatMessageAbortControllers.has(id)) {
      const abortController = this._chatMessageAbortControllers.get(id);
      abortController?.abort();
    }
  }

  /**
   * Abort all pending requests and clear the cache of AbortControllers
   */
  private _destroyAbortControllers() {
    for (const controller of this._chatMessageAbortControllers.values()) {
      controller?.abort();
    }
    this._chatMessageAbortControllers.clear();
  }

  /**
   * When the DO is destroyed, cancel all pending requests
   */
  async destroy() {
    this._destroyAbortControllers();
    await super.destroy();
  }
}
